app.controller ('mainCtrl', function($scope, $route, $routeParams, $rootScope, $location, $timeout, $_global, cons) {$scope.path = cons.path; $scope.text = cons.text; $scope.dataREAL = []; $scope.dataCCTV = []; $scope.glued = true; $_global.request($scope.path.json.station).then (function successCallback(response) {$scope.dataSTN = response.data.station; angular.forEach ($scope.dataSTN, function(value,key) {var rf_value = null; var wl_up_value = null; var wl_down_value = null; var rf_status = "white"; var wl_up_status = "white"; var wl_down_status = "white"; if ( value['data']['rf']['enable'] ) {rf_value = value['data']['rf']['value']['now']; rf_status = value['data']['rf']['value']['status']; } if ( value['data']['wl_up']['enable'] ) {wl_up_value = value['data']['wl_up']['value']['now']; wl_up_status = value['data']['wl_up']['value']['status']; } if ( value['data']['wl_down']['enable'] ) {wl_down_value = value['data']['wl_down']['value']['now']; wl_down_status = value['data']['wl_down']['value']['status']; } $scope.dataREAL.push ({id: value['id'], code: value['code'], date: value['date'], rf: {value: rf_value, status: rf_status }, wl_up: {value: wl_up_value, status: wl_up_status }, wl_down:  {value: wl_down_value, status: wl_down_status } } ); angular.forEach (value['cctv'], function(cctv,key) {$scope.dataCCTV.push({id: value['code'], no: key+1, zone: value['zone'], name: value['name'], src: cctv }); } ); } ); }, function errorCallback(response) {console.log(response); } ); if ( $rootScope.online ) {$scope.message = ''; $scope.messages = []; $scope.scadaHost = null; $.connection.hub.url = $scope.path.signalr; $scope.scadaHost = $.connection.scadaHost; $.connection.hub.start() .done (function () {$scope.scadaHost.server.joinGroup("AllStation_RealTime"); } ); $scope.scadaHost.client.addMessage = function (message) {if ( $scope.messages.length > 100 ) {$scope.messages = []; } var msg = JSON.parse(message); var selected = $_global.select($scope.dataSTN, 'id', msg.StationID); if ( msg.TagName == "rf_15m" ) {var tag = 'ปริมาณฝน'; } if ( msg.TagName == "wl1_real" ) {var tag = 'ระดับน้ำ(หน้า)'; } if ( msg.TagName == "wl2_real" ) {var tag = 'ระดับน้ำ(ท้าย)'; } if ( ["rf_15m","wl1_real","wl2_real"].indexOf(msg.TagName) > -1 ) {var obj = {id: msg.StationID, code: selected.code, name: selected.name, date: msg.TimeStamp, tag: tag, param: msg.TagName, value: parseFloat(msg.TagValue).toFixed(2)/1 }; $scope.messages.push(obj); $scope.update(obj); $scope.$apply(); } }; } $scope.update = function(data) {var keepGoing = true; angular.forEach ($scope.dataREAL, function(value,key) {if (keepGoing) {if ( data.id == value['id'] ) {if ( data.param == "rf_15m" ) {$scope.dataREAL[key].rf.value = data.value; $scope.dataREAL[key].date = data.date; } else if ( data.param == "wl1_real" ) {$scope.dataREAL[key].wl_up.value = data.value; $scope.dataREAL[key].date = data.date; } else if ( data.param == "wl2_real" ) {$scope.dataREAL[key].wl_down.value = data.value; $scope.dataREAL[key].date = data.date; } keepGoing = false; } } } ); }; $scope.$watch ('online', function(newStatus) {$scope.loader(newStatus); $scope.txtOnline = cons.text.error.conn; } ); $scope.dateUTC = function(dt) {var dateObj = new Date(); var dateNew = dateObj.getUTCFullYear() + "-" + (dateObj.getUTCMonth()+1) + "-" + dateObj.getUTCDate() + " " + dateObj.getHours()+":"+dateObj.getMinutes(); var d = (dt) ? dt : dateNew; var a = d.split(/[^0-9]/); if (a[5]) {return Date.UTC(a[0],a[1]-1,a[2],a[3],a[4],a[5]); } else {return Date.UTC(a[0],a[1]-1,a[2],a[3],a[4]); } }; $scope.convIcon = function(bool,type) {var style = ""; if (type=="door") {style = (bool) ? "fa-lock text-success" : "fa-unlock text-fade"; } else {style = (bool) ? "text-success" : "text-fade"; } return style; }; $scope.isActive = function(view) {if ( view === $location.path() || view === '/' + $location.path().split('/')[1] ) {return true; } }; $scope.scrollField = function(id) {var x = ( id ) ? $("#"+id).offset().top - 110 : 0; $('html, body').animate ({scrollTop: x }, 500 ); }; $scope.loader = function(status) {$('loader').show(); if (status) {$timeout (function() {$('loader').fadeOut(); }, 2000 ); } }; $scope.fullscreen = function() {var element = document.documentElement; if (element.requestFullscreen) {element.requestFullscreen(); } else if(element.mozRequestFullScreen) {element.mozRequestFullScreen(); } else if(element.webkitRequestFullscreen) {element.webkitRequestFullscreen(); } else if(element.msRequestFullscreen) {element.msRequestFullscreen(); } }; $scope.exit = function() {alert('Do you want to exit?'); }; } ); app.controller ('mapCtrl', function($scope, $rootScope, $timeout, $_global) {var scope = this; scope.active = null; scope.basket = []; scope.basketMax = 4; scope.stack = ""; scope.pop = function(id) {$scope.popid = id; scope.show = true; scope.active = id; }; scope.pin = function(type, data) {var p = s1 = s2 = s3 = null; var s = "success"; p = (type=="A") ? "fa-map-marker" : null; p = (type=="B") ? "fa-circle" : p; p = (type=="C") ? "fa-car" : p; s1 = (data.rf.enable) ? data.rf.value.status : null; s2 = (data.wl_up.enable) ? data.wl_up.value.status : null; s3 = (data.wl_down.enable) ? data.wl_down.value.status : null; s = ( [s1,s2,s3].indexOf("warning") > -1 ) ? "warning" : s; s = ( [s1,s2,s3].indexOf("danger") > -1 ) ? "danger" : s; s = ( [s1,s2,s3].indexOf("black") > -1 ) ? "black" : s; s = ( [s1,s2,s3].indexOf("gray") > -1 ) ? "gray" : s; s = ( [s1,s2,s3].indexOf("white") > -1 ) ? "white" : s; return p + " text-" + s + " sd-" + s; }; scope.genrBTN = function(code) {var x = false; if ( scope.basket.length < scope.basketMax ) {x = true; $.grep (scope.basket, function(e) {x = ( e.id == code ) ? false : x; } ); } return x; }; scope.addBasket = function(id,name) {scope.basket.push({id: id, name: name }); }; scope.removeBasket = function(key) {scope.basket.splice(key, 1); }; scope.stack = function() {return $_global.stack(scope.basket,'id'); }; } ); app.controller ('popCtrl', function($scope, $location, $timeout, $_global) {var scope = this; scope.swap = 0; scope.genrID = function(code,length,n) {var a = ( length > 1 ) ? "-" + ( n + 1 ) : ""; return code + a; }; scope.getID = function(id) {scope.selected = $_global.select($scope.dataSTN, 'code', id); scope.real = $_global.select($scope.dataREAL, 'code', id); scope.timeout = $scope.convIcon(scope.selected.timeout,''); scope.door = $scope.convIcon(scope.selected.door,'door'); }; $timeout (function() {if ( angular.isDefined($scope.popid) ) {scope.getID($scope.popid); } }, 1000 ); $scope.$watch ('popid', function(newValue,oldValue) {if ( newValue != oldValue ) {scope.getID(newValue); scope.swap = 0; } } ); } ); app.controller ('stnCtrl', function($scope, $routeParams) {$('console').hide(); var scope = this; scope.hide = true; scope.id = $routeParams.id.split("-"); scope.col = "col-sm-" + ( 12 / scope.id.length ); } ); app.controller ('tbCtrl', function($scope) {var scope = this; scope.door = function(bool) {return (bool) ? "fa-lock text-success" : "fa-unlock text-fade"; }; } ); app.controller ('trendCtrl', function($scope, $timeout, $interval, $_global) {var ud; var dateUTC; var scope = this; scope.code = ""; scope.name = ""; scope.runGraph = function(json,da,tg,wl2) {var tp = ( da == "rf" ) ? "column" : "line"; var options = {chart: {type: tp, backgroundColor: "transparent", zoomType: 'x', renderTo: tg }, title: {text: "xx", y: -100 }, xAxis: {type: 'datetime', dateTimeLabelFormats: {day: '%e %B %Y', week:'%e %B %Y', month:'%B %Y', year:'%Y'}, labels: {style: {color: "#fff"} } }, yAxis: {title: {text: ""}, labels: {style: {color: "#fff"} } }, legend: {symbolWidth: 40, itemStyle: {color: 'white'} }, exporting: {enabled: false }, tooltip: {shared: true, crosshairs: true, followPointer: true, useHTML: true, formatter: function () {var s = '<h6>' + Highcharts.dateFormat('%e/%m/%Y %H:%M',this.x) + '</h6>'; s += '<ul style="list-style:none;margin:0;padding:0;">'; $.each (this.points, function () {s += '<li style="margin:0;text-align:left"><span style="color:'+ this.point.color +'">\u25CF</span> <span>' + this.series.name + ': </span> ' + this.y.toFixed((da == "rf" ? 1 : 3)) + '</li>'; } ); s += '</ul>'; return s; } }, plotOptions: {series: {color: 'rgb(0,152,213)', marker: {enabled: false } } }, scrollbar: {enabled: true, barBackgroundColor: '#333', barBorderColor: '#111', buttonBackgroundColor: '#333', buttonBorderWidth: 0, rifleColor: 'white', trackBackgroundColor: '#222', trackBorderWidth: 0, trackBorderColor: '#111', }, series: [] }; if ( da == "rf" ) {options.series.push({name:"ฝน(มม.)", data:[]}); } else {options.series.push({name:"หน้า(ม.รทก.)", data:[], dashStyle: 'solid'}); if (wl2) {options.series.push({name:"ท้าย(ม.รทก.)", data:[], dashStyle: 'shortdot'}); } } /* plot value */ var dt; $.each (json, function(key, value) {/* var time = value.date.split(' ')[1]; options.xAxis.categories.push(time); options.series[0].data.push(value.stn[0].value1); if (wl2) {options.series[1].data.push(value.stn[0].value2); } */ var a = value.date.split(/[^0-9]/); var dateUTC = Date.UTC(a[0],a[1]-1,a[2],a[3],a[4] ); dt = dateUTC; if ( da == "rf" ) {options.series[0].data.push([dateUTC, (value.stn[0].value1 == null) ? null : value.stn[0].value1]); } else {options.series[0].data.push([dateUTC, (value.stn[0].value1 == null) ? null : value.stn[0].value1]); if (wl2) {options.series[1].data.push([dateUTC, (value.stn[0].value2 == null) ? null : value.stn[0].value2]); } } } ); Highcharts.setOptions({lang: {months: ['ม.ค.', 'ก.พ.','มี.ค.','เม.ย.','พ.ค.','มิ.ย.','ก.ค.','ส.ค.','ก.ย.','ต.ค.','พ.ย.','ธ.ค.'] } }); var chart = new Highcharts.Chart(options); /*chart.xAxis[0].setExtremes(dt-720000);*/ }; scope.getData = function(stn,da,tg,wl2) {var dateObj = new Date(); var month = dateObj.getUTCMonth() + 1; var day = dateObj.getUTCDate(); var year = dateObj.getUTCFullYear(); var newdate = year + "/" + month + "/" + day; var v = "&id[]="+stn+"&data="+da+"&format=15m&date1="+newdate+"&date2="+newdate; $_global.request($scope.path.json.search+v).then (function successCallback(response) {scope.dataGRAPH = response.data.search; scope.runGraph(scope.dataGRAPH,da,tg,wl2); }, function errorCallback(response) {console.log(response); } ); }; scope.update = function(id,rf,wl,wl2) {this.real = $_global.select($scope.dataREAL, 'id', id); if ( dateUTC == null || dateUTC < $scope.dateUTC(this.real.date) ) {dateUTC = $scope.dateUTC(this.real.date); if (rf) {var chartRF = $('#graph-rf').highcharts(); console.log('rf/ '+this.real.rf.value); chartRF.series[0].addPoint([dateUTC,this.real.rf.value],true,true); chartRF.redraw(); } if (wl) {var chartWL = $('#graph-wl').highcharts(); console.log('up/ '+this.real.wl_up.value); chartWL.series[0].addPoint([dateUTC,this.real.wl_up.value],true,true); if (wl2) {console.log('down/ '+this.real.wl_down.value); chartWL.series[1].addPoint([dateUTC,this.real.wl_down.value],true,true); } chartWL.redraw(); } /*console.log(dateUTC+' / '+this.real.date);*/ } }; scope.view = function(id) {scope.selected = $_global.select($scope.dataSTN, 'id', id); scope.id = id; scope.code = scope.selected.code; scope.name = scope.selected.name; var rf = scope.selected.data.rf.enable; var wl = scope.selected.data.wl_up.enable; var wl2 = scope.selected.data.wl_down.enable; if ( rf ) {scope.getData(id,'rf','graph-rf',false); } else {$('#graph-rf').html(""); } if ( wl ) {scope.getData(id,'wl','graph-wl',wl2); } else {$('#graph-wl').html(""); } dateUTC = null; $interval.cancel(ud); ud = $interval (function() {scope.update(id,rf,wl,wl2); }, 6000 ); }; /*scope.click = function(id) {var chart = $('#graph-wl').highcharts(); var dateUTC = $scope.dateUTC(); chart.series[0].addPoint([dateUTC,10]); chart.series[1].addPoint([dateUTC,10]); chart.redraw(); }*/ } ); app.controller ('cctvCtrl', function($scope) {var scope = this; scope.ft = { zone: 'A' }; scope.fullscreen = false; scope.zone = function(x) {scope.ft = { zone: x }; }; scope.zoom = function(src) {scope.show = true; scope.photo = src; }; } ); app.controller ('cfgCtrl', function($scope) {var scope = this; scope.slider = {minValue: 10, maxValue: 90, options: {floor: 0, ceil: 100, step: 1 } }; scope.update = function() {alert('x'); }; } ); app.controller ('userCtrl', function($scope) {var scope = this; } ); app.controller ('helpCtrl', function($scope) {var scope = this; } );